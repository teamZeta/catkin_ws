#!/usr/bin/env python
import cv2
import numpy as np 
from PIL import Image
import roslib


import roslib
roslib.load_manifest('facedetector')
import rospy
import sys, select, termios, tty
import cv
import time
import Image
import os
import cv2, numpy
from std_msgs.msg import String
from std_msgs.msg import Bool
import sensor_msgs.msg
from dynamic_reconfigure.server import Server as DynamicReconfigureServer
from detection_msgs.msg import Detection
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image

class Faces():
	def face_callback(self, data):
		print("v call back")
		if(time.time() - self.cas > 5 ):
			print("berem image")

			n = 1
			image = numpy.zeros((self.face_size * n, self.face_size), dtype=numpy.uint8)
			try:

				for i in xrange(0, n):
					image = self.bridge.imgmsg_to_cv2(data.image, "mono8")
					equ = cv2.equalizeHist(image)
					#cv2.imwrite("/home/team_zeta/slike/"+str(100)+".png", equ)
					self.recognize(equ)
					self.cas = time.time()
			except CvBridgeError, e:
				print e


	def read_images(self,urls):
		try:
			image_paths = [os.path.join("/home/team_zeta/catkin_ws/src/slike/", f) for f in os.listdir("/home/team_zeta/catkin_ws/src/slike/")]
		except Exception as inst:
			image_paths = [os.path.join("/home/boka/catkin_ws/src/slike/", f) for f in os.listdir("/home/boka/catkin_ws/src/slike/")]
		images = []
		labels = []
		print(image_paths[0])
		for url in image_paths:
			#images += [cv2.imread(url)]
			equ = cv2.equalizeHist(cv2.cvtColor(cv2.imread(url), cv2.COLOR_BGR2GRAY))
			images += [equ]
			print(os.path.split(url)[1].split(".")[1])
			nbr = int(os.path.split(url)[1].split(".")[1].split("-")[1])
			labels += [nbr]
		return [images, labels]


	def learn(self):
		try:
			[images, labels] = self.read_images("/home/team_zeta/catkin_ws/src/slike/")
			[images, labels] = self.read_images("/home/boka/catkin_ws/src/slike/")
		except Exception as inst:
			[images, labels] = self.read_images("/home/boka/catkin_ws/src/slike/")
			[images, labels] = self.read_images("/home/team_zeta/catkin_ws/src/slike/")
			
		print("ucim se, pocakaj..")
		print images
		print labels
		self.recognizer.train(images, np.array(labels))
		#self.recognizer.save("/home/boka/model/model.yaml")

	def recognize(self,image):
		nbr_predicted, conf = self.recognizer.predict(image)
		print("predicted" + str(nbr_predicted))
		print("coef"+str(conf))

	def __init__(self):
		self.recognizer = cv2.createLBPHFaceRecognizer()
		#self.recognizer = cv2.createFisherFaceRecognizer()
		print("ucim")
		self.learn()
		print("naucil")
		faces_topic = rospy.get_param('~topic', rospy.resolve_name('/facedetector/faces'))
		
		self.face_size = rospy.get_param('~face_size', 128)

		self.bridge = CvBridge()
		self.faces_sub = rospy.Subscriber(faces_topic, Detection, self.face_callback)
		self.cas = time.time()



# Main function.    
if __name__ == '__main__':
	print("v main")
	rospy.init_node('facereco')

	try:
		fd = Faces()
		r = rospy.Rate(0.2)
		while not rospy.is_shutdown():
			r.sleep()
	except rospy.ROSInterruptException: pass


