#!/usr/bin/env python
import time
import cv2, cv, numpy
import Image
from cv_bridge import CvBridge, CvBridgeError
class Detector():

	def image_callback(self, data):
		if not self.enabled:
			return
		try:
			if time.time() - cas > 3: 
				cas = time.time()
				now = rospy.Time.now()
				if self.throttle and (now.to_sec() - self.throttle_time.to_sec()) < self.throttle:
				return

				self.throttle_time = now

				cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
				equb,equg,equr = cv2.split(image)
				equb = cv2.equalizeHist(equb)
				equg = cv2.equalizeHist(equg)
				equr = cv2.equalizeHist(equr)
				equ = cv2.merge((equb,equg,equr))
				try:
					cv2.imwrite("/home/boka/catkin_ws/src/stolpi/"+str(time.time())+"-"+str(self.var)+".png", equ)
					cv2.imwrite("/home/team_zeta/catkin_ws/src/stolpi/"+str(time.time())+"-"+str(self.var)+".png", equ)
				except Exception as inst:
					cv2.imwrite("/home/boka/catkin_ws/src/stolpi/"+str(time.time())+"-"+str(self.var)+".png", equ)
					cv2.imwrite("/home/team_zeta/catkin_ws/src/stolpi/"+str(time.time())+"-"+str(self.var)+".png", equ)
				print("napisal image")



		except CvBridgeError, e:
			print e

	def __init__(self):
		self.cas = time.time()
		self.bridge = CvBridge()
		self.image_sub = rospy.Subscriber('camera', Image, self.image_callback, queue_size=1)

# Main function.    
if __name__ == '__main__':
	# Initialize the node and name it.
	rospy.init_node('opencv_stolp')
	try:
		fd = Detector()
		rospy.spin()    
	except rospy.ROSInterruptException: pass