#!/usr/bin/env python
import cv2
import numpy as np 
from PIL import Image
import roslib

roslib.load_manifest('facedetector')
roslib.load_manifest('localizer')
import rospy
import sys, select, termios, tty
import cv
import time as tm
import Image
import os
import cv2, numpy
import message_filters
from std_msgs.msg import String
from std_msgs.msg import Bool
from std_msgs.msg import ColorRGBA
import collections
import sensor_msgs.msg
from dynamic_reconfigure.server import Server as DynamicReconfigureServer
from detection_msgs.msg import Detection
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image
from localizer.srv import Localize
from sensor_msgs.msg import CameraInfo
from visualization_msgs.msg import Marker, MarkerArray
from image_geometry import PinholeCameraModel
from geometry_msgs.msg import Point, Vector3

class Faces():
	def camera_callback(self, camera_info):
		#print("berem camera")
		self.camera_infos.append(camera_info)


	def face_callback(self, data):
		#print("v call back")
	
		#print("berem image")

		n = 1
		#image = numpy.zeros((self.face_size * n, self.face_size), dtype=numpy.uint8)
		try:
			for i in xrange(0, n):
				u = data.x + data.width / 2
				v = data.y + data.height / 2
				image = self.bridge.imgmsg_to_cv2(data.image, "bgr8")
				image = cv2.resize(image, (50, 50)) 
				equb,equg,equr = cv2.split(image)
				equb = cv2.equalizeHist(equb)
				equg = cv2.equalizeHist(equg)
				equr = cv2.equalizeHist(equr)
				image = cv2.merge((equb,equg,equr))
				
				#cv2.imwrite("/home/team_zeta/slikeZ/"+str(100)+".png", equ)
				[nbr_predicted, conf] = self.recognize(np.array(image).flatten().tolist())
				if conf > 700000000:
					return
				print(self.id_prep[nbr_predicted])

				if self.id_prep[nbr_predicted] == 0:
					self.id_cas[nbr_predicted] = tm.time()

				if tm.time() - self.id_cas[nbr_predicted] < 1:
					self.id_prep[nbr_predicted] += 1
					self.id_cas[nbr_predicted] = tm.time()
				else:
					self.id_prep[nbr_predicted] = 0
				
				if self.id_prep[nbr_predicted] > 10:
					camera_info = None
					best_time = 100
					for ci in self.camera_infos:
						time = abs(ci.header.stamp.to_sec() - data.header.stamp.to_sec())
						if time < best_time:
							camera_info = ci
							best_time = time

					#print("sledi camera ----"+ str(data.header.stamp.to_sec()) + "sss" + str(self.camera_infos))
					if not camera_info or best_time > 101:
						return

					camera_model = PinholeCameraModel()
					camera_model.fromCameraInfo(camera_info)

					point = Point(((u - camera_model.cx()) - camera_model.Tx()) / camera_model.fx(),
					     ((v - camera_model.cy()) - camera_model.Ty()) / camera_model.fy(), 1)

					localization = self.localize(data.header, point, self.region_scope)
					#print("sledi ----")
					if not localization:
						return
					#print("returnaj")
					marker = Marker()
					marker.header.stamp = data.header.stamp
					marker.header.frame_id = data.header.frame_id
					marker.pose = localization.pose
					marker.type = Marker.CUBE
					marker.action = Marker.ADD
					marker.frame_locked = False
					marker.lifetime = rospy.Duration.from_sec(1)
					marker.id = nbr_predicted
					marker.scale = Vector3(0.1, 0.1, 0.1)
					marker.color = ColorRGBA(1, 0, 1, 1)

					self.markers.markers.append(marker)
					#self.marker_id_counter += 1
		except CvBridgeError, e:
			print e



	def flush(self):
		if not self.markers.markers or len(self.markers.markers) == 0:
			self.markers = MarkerArray()
			return
		self.markers_pub.publish(self.markers)
		self.markers = MarkerArray()


	def read_images(self,urls):
		try:
			image_paths = [os.path.join("/home/team_zeta/catkin_ws/src/slikeZ/", f) for f in os.listdir("/home/team_zeta/catkin_ws/src/slikeZ/")]
		except Exception as inst:
			image_paths = [os.path.join("/home/boka/catkin_ws/src/slikeZ/", f) for f in os.listdir("/home/boka/catkin_ws/src/slikeZ/")]
		images = []
		labels = []
		#print(image_paths[0])
		for url in image_paths:
			#images += [cv2.imread(url)]
			equ = cv2.imread(url)
			equ = cv2.resize(equ, (50, 50)) 
			equb,equg,equr = cv2.split(equ)
			equb = cv2.equalizeHist(equb)
			equg = cv2.equalizeHist(equg)
			equr = cv2.equalizeHist(equr)
			image = cv2.merge((equb,equg,equr))
			images += [np.array(image).flatten().tolist()]
			#print(os.path.split(url)[1].split(".")[1])
			nbr = int(os.path.split(url)[1].split(".")[1].split("-")[1])
			labels += [nbr]
		return [images, labels]


	def learn(self):
		try:
			[images, labels] = self.read_images("/home/team_zeta/catkin_ws/src/slikeZ/")
		except Exception as inst:
			[images, labels] = self.read_images("/home/boka/catkin_ws/src/slikeZ/")
		#print("ucim se, pocakaj..")
		#print(np.array(images))
		#print(len(np.array(images)[0]))
		#print(len(np.array(images)))
		#print labels
		self.recognizer.train(np.array(images).astype(np.float32), np.array(labels).astype(np.float32))
		#self.recognizer.save("/home/boka/model/model.yaml")

	def recognize(self,image):
		#print(np.array([image]).astype(np.float32))
		ret, nbr_predicted, neighbours, dist = self.recognizer.find_nearest(np.array([image]).astype(np.float32), k=5)
		#print("predicted" + str(nbr_predicted))
		print("coef"+str(np.mean(dist)) + " predicta "+ str(nbr_predicted))
		return [nbr_predicted, np.mean(dist)]

	def __init__(self):
		self.buffer_size = rospy.get_param('~camera_buffer_size', 50)
		self.region_scope = rospy.get_param('~region', 3)
		rospy.wait_for_service('localizer/localize')
		self.camera_infos = collections.deque(maxlen = self.buffer_size)


		#camera_topic = rospy.get_param('~topic', rospy.resolve_name('/camera/rgb/camera_info'))
		self.camera_sub = message_filters.Subscriber('/camera/rgb/camera_info', CameraInfo)
		self.camera_sub.registerCallback(self.camera_callback)


		self.recognizer = cv2.KNearest()
		print("ucim")
		self.learn()
		print("naucil")
		faces_topic = rospy.get_param('~topic', rospy.resolve_name('/detector/traffic_signs'))
		
		self.face_size = rospy.get_param('~face_size', 128)

		self.bridge = CvBridge()
		self.faces_sub = rospy.Subscriber(faces_topic, Detection, self.face_callback)
		self.cas = tm.time()

		self.localize = rospy.ServiceProxy('localizer/localize', Localize)
		self.markers_pub = rospy.Publisher('/sign', MarkerArray, queue_size=10)
		self.markers = MarkerArray()
		self.count = 0
		self.id_prep = np.zeros(10)
		self.id_cas = np.ones(10)*10


# Main function.    
if __name__ == '__main__':
	print("v main")
	rospy.init_node('znakreco')

	try:
		fd = Faces()
		r = rospy.Rate(30)
		while not rospy.is_shutdown():
			fd.flush()
			r.sleep()
	except rospy.ROSInterruptException: pass

